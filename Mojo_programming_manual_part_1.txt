## Using the Mojo compiler
With the Mojo SDK, you can run a Mojo program from a terminal just like you can with Python

(In ubuntu os)
$ cat hello.mojo
def main():
    print('hello world')
    for x in range(9,0,-3):
        print(x)

$ mojo hello.mojo

## Basic systems programming extensions
# let and var declarations
Inside a def in Mojo, you may assign a value to a name and it implicitly creates a function scope  variable just like in Python
This provides a very dynamic and low-ceremony way to write code, but it is a challenge for two reasons:

1. Systems programmers often want to declare that a value is immutable for type-safety and performance.
2. They may want to get an error if they mistype a variable name in an assignment.

To support this, Mojo provides scoped runtime value declarations: let is immutable, and var is mutable

Note that let and var are completely optional when in a def function, but they're requried for all variables
in an fn function
Also beware tht when using Mojo in a REPL environment, top-level variables are treated like variables in a def,
so they allow implicit value type declarations (they do not require var or let declarations, nor type declarations). This matches the Python REPL behavior

# struct types
Mojo is based on MLIR and LLVM, which offer a cutting-edge compiler and code generation system used in many programming languages
An important feature of modern systems programming languages is the ability to build high-level and safe abstractions on top of these complex, 
low-level operations without any performance loss. In Mojo, this is provided by the struct type

A struct in Mojo is similar to Python class
But differences of struct and class is:
-Python classes are dynamic : they allow for dynamic dispatch, monkey-patching (or “swizzling”), and dynamically binding instance properties at runtime
-Mojo structs are static : they are bound at compile-time (you cannot add methods at runtime). Structs allow you to trade flexibility for performance while being safe and easy to use.


ex. 
struct MyPair:
    var first: Int
    var second: Int

    # We use 'fn' instead of 'def' here - we'll explain that soon
    fn __init__(inout self, first: Int, second: Int):
        self.first = first
        self.second = second

    fn __lt__(self, rhs: MyPair) -> Bool:
        return self.first < rhs.first or
              (self.first == rhs.first and
               self.second < rhs.second)

Syntactically, the biggest difference compared to a Python class is that all instance properties 
in a struct must be explicitly declared with a var or let declaration

In Mojo, the structure and contents of a “struct” are set in advance and can’t be changed 
while the program is running. This means you can’t use del to remove a method or change its value 
in the middle of running the program.

It helps Mojo run your code faster. The program knows exactly where to find the struct’s information and how to use it without any extra steps or delays.

# Int(Mojo) vs int(Python)
In Python, the int type can handle really big numbers and has some extra features, like checking if two numbers are the same object.
Mojo’s Int is different. It’s designed to be simple, fast, and tuned for your computer’s hardware to handle quickly

# Strong type checking
One of the primary ways to employ strong type checking is with Mojo’s struct type. 
A struct definition in Mojo defines a compile-time-bound name, 
and references to that name in a type context are treated as a strong specification for the value being defined

ex.
def pair_test() -> Bool:
    let p = MyPair(1,2)
    return True

Python has syntactically identical features for MyPy type annotations, 
but they are not enforced by the compiler: 
instead, they are hints that inform static analysis. 
By tying types to specific declarations, 
Mojo can handle both the classical type annotation hints and strong type specifications without breaking compatibility.


# Overloaded functions and methods
Like Python, you can define functions in Mojo without specifying argument data types and Mojo will handle them dynamicall
However, when you want to ensure type safety, as discussed above, Mojo also offers full support for overloaded functions and methods

This allows you to define multiple functions with the same name but with different arguments. (like __init__.super() in python)
When resolving a function call, Mojo tries each candidate and uses the one that works (if only one works),
or it picks the closest match (if it can determine a close match), 
or it reports that the call is ambiguous if it can’t figure out which one to pick. 
In the latter case, you can resolve the ambiguity by adding an explicit cast on the call site

ex.
struct Complex:
    var re: Float32
    var im: Float32

    fn __init__(inout self, x: Float32):
        """Construct a complex number given a real number."""
        self.re = x
        self.im = 0.0

    fn __init__(inout self, r: Float32, i: Float32):
        """Construct a complex number given its real and imaginary components."""
        self.re = r
        self.im = i

You can overload methods in structs and classes and overload module-level functions.
Mojo doesn’t support overloading solely on result type, and doesn’t use result type or contextual type information for type inference, 
keeping things simple, fast, and predictable. 
Mojo will never produce an “expression too complex” error, because its type-checker is simple and fast by definition.

Again, if you leave your argument names without type definitions, 
then the function behaves just like Python with dynamic types. 
As soon as you define a single argument type, Mojo will look for overload candidates and resolve function calls as described above.


