## Comparing def and fn argument passing
Mojo’s def function is essentially just sugaring for the fn function:

A def argument without an explicit type annotation defaults to Object.

A def argument without a convention keyword (such as inout or owned) 
is passed by implicit copy into a mutable var with the same name as the argument. (This requires that the type have a __copyinit__ method.)

## Importing Python modules
To import a Python module in Mojo, just call Python.import_module() with the module name:

from python import Python

# This is equivalent to Python's `import numpy as np`
let np = Python.import_module("numpy")

# Now use numpy as if writing in Python
array = np.array([1, 2, 3])
print(array)

************************************************
Currently, you cannot import individual members 
(such as a single Python class or function)—you must import the whole Python module and then access members through the module name.
************************************************


## Mojo types in Python
Mojo primitive types implicitly convert into Python objects. 
Today(2023.10.10) we support lists, tuples, integers, floats, booleans, and strings
