## Mojo modules
A Mojo module is a single Mojo source file that includes code suitable for use by other files that import it.

ex. mymodule.mojo
struct MyPair:
    var first: Int
    var second: Int

    fn __init__(inout self, first: Int, second: Int):
        self.first = first
        self.second = second
    fn dump(self):
        print(self.first, self.scond)

Notice that this code has no main() function, so you canâ€™t execute mymodule.mojo. 
However, you can import this into another file with a main() function and use it there (like python)

ex. main.mojo
from mymodule import MyPair
fn main():
    let mine = MyPair(2,4)
    mine.dump()

or

import mymodule
fn main():
    let mine = mymodule.MyPair(2,4)
    mine.dump()

or 

import mymodule as my
fn main():
    let mine = my.MyPair(2,4)
    mine.dump()

In this example, it only works when mymodule.mojo is in the same directory as main.mojo. (like Python)
Currently, you canâ€™t import .mojo files as modules if they reside in other directories. 
That is, unless you treat the directory as a Mojo package, as described in the next section.


## Mojo packages
A Mojo package is just a collection of Mojo modules in a directory that includes an __init__.mojo file. (like Python)
By organizing modules together in a directory, you can then import all the modules together or individually. 
Optionally, you can also compile the package into a .mojopkg or .ðŸ“¦ file thatâ€™s easier to share.

If file structure :
main.mojo
mypackage/
    __init__.mojo
    mymodule.mojo

In this case, the main.mojo file can now import MyPair through the package name

ex. main.mojo
from mypackage.mymodule import MyPair

fn main():
    let mine = my.MyPair(2, 4)
    mine.dump()

Notice that the __init__.mojo is crucial here. 
If you delete it, then Mojo doesnâ€™t recognize the directory as a package and it cannot import mymodule. (like Python)

## The __init__ file
The __init__.mojo file is required to indicate that a directory should be treated as a Mojo package, and it can be empty (like Python)

Currently, top-level code is not supported in .mojo files, "so unlike Python", you canâ€™t write code in __init__.mojo 
that executes upon import. You can, however, add structs and functions, which you can then import from the package name
However, instead of adding APIs in the __init__.mojo file, you can import module members, 
which has the same effect by making your APIs accessible from the package name, instead of requiring the <package_name>.<module_name> notation

If file structure :
main.mojo
mypackage/
    __init__.mojo
    mymodule.mojo

** importtant **
Then, 
__init__.mojo
from .mymodule import MyPair

Now, we can simplify the import statement in main.mojo like this :
main.mojo
from mypackage import MyPair


